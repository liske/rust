#!/usr/bin/perl

# rust - Redundant Uplink SwiTchero
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2012 - 2014 (C) Thomas Liske <thomas@fiasko-nw.net>
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Config;
use AnyEvent;
use File::Basename;
use Getopt::Std;
use Log::Dispatch;
use Log::Dispatch::Screen;
use Log::Dispatch::Syslog;
use Log::Dispatch::File;
use Proc::Daemon;
use Proc::PID::File;

use constant {
    RUSTD_VERSION => '0.1',
};

use strict;
use warnings;

$0 = 'rustd';

my $logfmt = sub { my %p = @_; chomp($p{'message'}); return ("[$p{level}] $p{message}\n"); };
my $logffile = sub { my %p = @_;  return (scalar localtime())." [$$] $p{message}"; };
my $logger = Log::Dispatch->new(callbacks => $logfmt);

my $daemonize;
my $mypid = $$;
my @pipe_pids;

END {
    foreach my $pid (@pipe_pids) {
	kill 'TERM', $pid;
    }
    $logger->notice('terminated') if(defined($logger) && !defined($daemonize));
}

sub WARN_handler {
    my($signal) = @_;

    if(defined $logger) {
        $logger->warning("WARNING: $signal");
    }
    else {
        printf STDERR "WARNING: $signal\n";
    }
}

sub DIE_handler {
    my($signal) = @_;

    if(defined $logger) {
        $logger->critical("ERROR: $signal");
    }
    else {
        printf STDERR "ERROR: $signal\n";
    }

    exit 1;
}

sub INT_handler {
    if(defined($mypid) && ($mypid == $$)) {
        if(defined $logger) {
            $logger->notice('Got SIGINT, terminating.');
        }
        else {
            printf STDERR "Got SIGINT, terminating.\n";
        }
    }

    exit;
}

$SIG{__WARN__} = 'WARN_handler';
$SIG{__DIE__}  = 'DIE_handler';
$SIG{INT} = 'INT_handler';
$SIG{PIPE} = 'IGNORE';
$SIG{CHLD} = 'IGNORE';

$logger->add(
    Log::Dispatch::Screen->new(
	name => 'console',
	min_level => 'notice',
    )
);

sub mydie($) {
    $logger->critical(shift);
    exit 1;
}

AnyEvent::post_detect {
    $logger->info("using $AnyEvent::MODEL event loop");
};

our $opt_c = '/etc/rust/rustd.conf';
our $opt_f;
getopts('fc:');
mydie("Could not read config file '$opt_c'.") unless(-r $opt_c);
$logger->info("config file: '$opt_c'");

my %conf;
my %uplinks;
eval `cat "$opt_c"`;

# enable log to file
if(exists($conf{'logfile'})) {
    $logger->add(
	Log::Dispatch::File->new(
	    name => 'logfile',
	    min_level => 'info',
	    filename => $conf{'logfile'},
	    close_after_write => '1',
	    callbacks => $logffile,
	)
    );
}
# fallback to syslog
else {
    $logger->add(
	Log::Dispatch::Syslog->new(
	    name => 'syslog',
	    min_level => 'info',
	    ident => 'rustd',
	    logopt => 'pid',
	    facility => 'daemon',
	)
    );
}

$logger->info('rustd '.RUSTD_VERSION);

unless($opt_f) {
    # daemonize
    $daemonize = 1;
    eval { Proc::Daemon::Init() };
    $daemonize = undef;
    mydie "Unable to fork daemon: $@" if($@);

    # check if we are alone
    eval {
	die "Daemon is already running or PID file is stale!" if(Proc::PID::File->running(verify => 1, dir => $conf{'rundir'}));
    };
    mydie "Failed to setup PID file: $@" if($@);

    # detach log to console
    $logger->notice('Could not remove console dispatcher!') unless($logger->remove('console'));
}

sub iprtmon {
    my $fh = shift;
    my $l = <$fh>;
    unless(defined($l)) {
	close($fh);
	return;
    }

    chomp($l);
    return unless($l =~ /^(Deleted )?(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(\/\d+)?)(.+)$/);
    my ($del, $prefix, $opts) = ($1, $2, $4);

    $opts =~ s/\s+/ /g;
    $opts =~ s/^\s+//;

    my %opts = split(/ /, $opts);

    return if(exists($opts{table}));

    if($del) {
	$logger->info("route del: $prefix => $opts");
	system(qw(ip route del), $prefix, %opts, qw(table rust_main));
    }
    else {
	$logger->info("route add: $prefix => $opts");
	system(qw(ip route add), $prefix, %opts, qw(table rust_main));
    }
}

open(IPRTMON, "ip monitor route |") || die;
my $wiprtmon = AnyEvent->io(fh => \*IPRTMON, poll => 'r', cb => sub { iprtmon(\*IPRTMON); });

system(qw(ip route flush table rust_main));
open(IPRTCP, "ip route show table main |");
my $wiprtcp;
$wiprtcp = AnyEvent->io(fh => \*IPRTCP, poll => 'r', cb => sub { iprtmon(\*IPRTCP); }, on_eof => sub { $wiprtcp = undef; });

AnyEvent->condvar->recv;
